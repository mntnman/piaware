#!/bin/sh -x

NAME=piaware-mutability
CONFIGFILE=/etc/default/$NAME
ADEPTCONFIGFILE=/etc/piaware.adept.conf

set -e
. /usr/share/debconf/confmodule

db_set_yn() {
  case "x$2" in
    xyes) db_set $1 true ;;
    x) db_set $1 "" ;; 
    *) db_set $1 false ;;
  esac
}

db_set_01() {
  case "$2" in
    0) db_set $1 false ;;
    1) db_set $1 true ;; 
    *) ;;
  esac
}

# Load config file, if it exists.
if [ -e $CONFIGFILE ]; then
  . $CONFIGFILE || true

  # Store values from config file into
  # debconf db.

  db_set_yn $NAME/auto-start "$START_PIAWARE"
  db_set $NAME/run-as-user "$PIAWARE_USER"
  db_set $NAME/log-file "$LOGFILE"
  db_set $NAME/extra-args "$EXTRA_ARGS"
fi

# .. and the other one.
if [ -e $ADEPTCONFIGFILE ]; then
  (
    while read key val <&4; do
      case "$key" in
        autoUpdate) db_set_01 $NAME/allow-auto-updates "$val" ;;
        manualUpdate) db_set_01 $NAME/allow-manual-updates "$val" ;;
        sendHealthInfo) db_set_01 $NAME/allow-health-info "$val" ;;
        sendLogMessages) db_set_01 $NAME/allow-log-messages "$val" ;;
        user) db_set $NAME/flightaware-user "$val" ;;
        password) db_set $NAME/flightaware-password "$val" ;;
        *) echo "Warning: unhandled adept config key: $key" >&2 ;;
      esac
    done
  ) 4<$ADEPTCONFIGFILE
fi

# Ask questions.

db_input_verify() {
  # $1 = priority
  # $2 = db key
  # $3 = verification function, should return 0 if OK
  PRI=$1; KEY=$2; VERIFY=$3

  set +e
  db_input $PRI $KEY; RESULT=$?
  db_go
  set -e
  ASKED=0
  while :
  do
    db_get $KEY
    if $VERIFY $RET; then return 0; fi
    if [ $RESULT -ne 0 ]; then
      # db_input failed, and the existing value does not validate
      if [ $RESULT = 30 ] && [ $ASKED = 0 ]
      then
       # question was skipped, but existing value is invalid
       # bump priority and try again (once)
       PRI=high
       ASKED=1
      else
       # give up, use the default value
       db_reset $KEY
       return 0
      fi
    else 
     # db_input was OK, but the value did not verify.
     # show an error message
     db_input high $NAME/invalid-$VERIFY || true
    fi

    # try again
    set +e
    db_fset $KEY seen false
    db_input high $KEY; RESULT=$?
    db_go
    set -e
  done
}
       
is_not_empty() {
  if [ -z "$1" ]; then return 1; else return 0; fi
}    

db_input high $NAME/auto-start || true

db_go || true; db_get $NAME/auto-start; if [ "$RET" = "true" ]; then
 # all of these are only relevant if the init script is enabled

 db_input_verify low $NAME/run-as-user is_not_empty || true
 db_input_verify low $NAME/log-file is_not_empty || true

 db_input high $NAME/flightaware-user || true
 db_go || true; db_get $NAME/flightaware-user; if [ -n "$RET" ]; then
   db_input_verify high $NAME/flightaware-password is_not_empty || true 
 else
   db_set $NAME/flightaware-password ""
 fi

 db_input medium $NAME/allow-auto-updates || true
 db_input medium $NAME/allow-manual-updates || true

 db_input low $NAME/allow-health-info || true
 db_input low $NAME/allow-log-messages || true

 db_go || True
 db_get $NAME/allow-auto-updates; R1="$RET"
 db_get $NAME/allow-manual-updates; R2="$RET"
 if [ "x$R1" = "xtrue" ] || [ "x$R2" = "xtrue" ]; then
   db_input high $NAME/note-about-sudoers || true
   db_go || True
 fi

 db_input low $NAME/extra-args || true 
fi


# Done.
db_stop
