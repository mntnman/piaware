#!/bin/sh
### BEGIN INIT INFO
# Provides:          piaware-mutability
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      dump1090-mutability dump1090-mr dump1090-flightaware
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Communicate ADS-B data to FlightAware
# Description:       piaware is a way to connect a homebrew Raspberry Pi-based
#                    ADS-B receiver running dump1090 over a TLS connection to
#                    forward ADS-B data to FlightAware
### END INIT INFO

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME=piaware-mutability
DESC="$NAME daemon"
DAEMON=/usr/bin/piaware
PIDFILE=/var/run/$NAME/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# work out daemon args

# sanitize missing settings
[ -z "$START_PIAWARE" ] && START_PIAWARE=no
[ -z "$PIAWARE_USER" ] && PIAWARE_USER="missing-PIAWARE_USER-setting-in-config"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

        if [ "x$START_PIAWARE" != "xyes" ]; then
            log_warning_msg "Not starting $NAME daemon, disabled via /etc/default/$NAME"
            return 2
        fi

	start-stop-daemon --start --quiet --pidfile $PIDFILE --user $PIAWARE_USER --exec $DAEMON --test > /dev/null \
		|| return 1

        # create the directory containing $PIDFILE with the appropriate permissions
        PIDFILEDIR=`dirname $PIDFILE`
        if [ ! -e $PIDFILEDIR ]; then
          (mkdir $PIDFILEDIR && chmod 0700 $PIDFILEDIR && chown $PIAWARE_USER $PIDFILEDIR) || log_warning_msg "Failed to create $PIDFILEDIR"
        fi

        # make sure that the logfile is owned by piaware (this is so that a self-restart
        # as the piaware user can re-open the logfile)
        if [ ! -f $LOGFILE ]; then touch $LOGFILE; fi
        chown $PIAWARE_USER $LOGFILE
        
	start-stop-daemon --start --quiet --pidfile $PIDFILE --user $PIAWARE_USER --chuid $PIAWARE_USER --background --no-close --exec $DAEMON -- \
		-p $PIDFILE -debug $EXTRA_ARGS >>$LOGFILE 2>&1 \
		|| return 2
        sleep 1
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --retry=TERM/30/KILL/5 --pidfile $PIDFILE --user $PIAWARE_USER --exec $DAEMON
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
        sleep 1
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
